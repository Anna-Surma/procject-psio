#include "game.h"
#include "player.h"
#include "Graphics.h"
#include "bullet.h"
#include "enemy.h"
#include <random>

int main()
{
    sf::RenderWindow window(sf::VideoMode(700, 800), "My window");
    window.setVerticalSyncEnabled(true);

    sf::Texture character_texture;
    character_texture.loadFromFile("Run(32x32).png");

    Player character(character_texture);
    sf::Clock clock;

    sf::Texture platform_texture;
    platform_texture.loadFromFile("block2.png");

    Graphics platform;
    std::vector<sf::Sprite> platforms = platform.create_platforms(platform_texture, window);

    sf::Texture background;
    background.loadFromFile("SunsetSky2.png");

    sf::Texture wall;
    wall.loadFromFile("block1.png");

    sf::Texture ground;
    ground.loadFromFile("grass.png");
    platform.create_others(background, ground, wall, window);

    sf::Texture enemy_texture;
    if(!enemy_texture.loadFromFile("enemy.png"))
    {
        std::cout<<"Textures not found!"<<std::endl;
    }

      Enemy enemy;

    for(int i=0; i<(6*160); i+=160)
    {
         enemy.add_animation_frame(sf::IntRect(i, 0, 160, 200));
    }

      for(int i=(6*160); i>0; i-=160)
      {
           enemy.add_animation_frame(sf::IntRect(i, 0, -160, 200));
      }



    std::vector<sf::Sprite> enemys = enemy.create_enemy(platform.platforms, enemy_texture);

    std::vector<Bullet> bullets;
    bool isShooting = false;
    bool is_Right=true;

    sf::View view(sf::FloatRect(0,0, 700, 800));


    while (window.isOpen())
        {
        sf::Time time = clock.restart();
            sf::Event event;

//            float s=100*time.asSeconds();
//            view.move(0, -s);

            while (window.pollEvent(event))
            {
                if(event.type==sf::Event::Closed)
                    window.close();
                if(event.type == sf::Event::KeyPressed)
                {}
                            if (sf::Keyboard::isKeyPressed(sf::Keyboard::B)) {
                                isShooting = true;                                
                            }
                            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right)) {
                                is_Right = true;
                            }
                            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left)) {
                                is_Right = false;
                            }
             }



            platform.platform_move(time);

            window.clear();
            window.setView(view);

            platform.draw_others(window);
            platform.draw_platform(window);
            character.draw(window);
            enemy.draw_enemys(window);



            enemy.move_enemy(platform.platforms, time);

            if (isShooting == true) {
                        Bullet bullet(ground);
                        bullet.set_Pos(sf::Vector2f(character.body.getPosition().x, character.body.getPosition().y));
                        bullets.push_back(bullet);

                        isShooting = false;
                    }

            for (auto itr =  bullets.begin(); itr!=bullets.end();) {
                                   itr->draw(window);
                                   itr->shoot(character.is_right);
                                   enemy.check_coll(*itr);

                                   if (itr->get_Pos().x < 0 || itr->get_Pos().x > window.getSize().x
                                   || itr->get_Pos().y < 0 || itr->get_Pos().y > window.getSize().y)
                                   {
                                     itr = bullets.erase(itr);
                                   }
                                   else
                                   {
                                       itr++;
                                   }
                               }

            window.display();



            for(int i=0; i<(12*32); i+=32)
            {
                 character.add_animation_frame(sf::IntRect(i, 0, 32, 32));
            }

            for(int i=(12*32); i>0; i-=32)
            {
                 character.add_animation_frame(sf::IntRect(i, 0, -32, 32));
            }

            character.check_coll(platform.platforms);

            character.animeted_movement(time, window);


     }
    return 0;
}
